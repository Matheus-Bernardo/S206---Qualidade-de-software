{
	"info": {
		"_postman_id": "95ef24d9-e021-41ab-afe6-0b59223e3ccf",
		"name": "Lista Exercicios",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34828266",
		"_collection_link": "https://rwf222.postman.co/workspace/rwf~87df3f13-def4-49fc-8a05-17117d51c7e3/collection/34828266-95ef24d9-e021-41ab-afe6-0b59223e3ccf?action=share&source=collection_link&creator=34828266"
	},
	"item": [
		{
			"name": "Get TodoList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the JSON schema for the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('userId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('completed').that.is.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(todo) {\r",
							"    pm.expect(todo).to.have.property('userId');\r",
							"    pm.expect(todo).to.have.property('id');\r",
							"    pm.expect(todo).to.have.property('title');\r",
							"    pm.expect(todo).to.have.property('completed');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response attributes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item.userId).to.be.a('number').and.to.satisfy((userId) => userId >= 0, \"userId should be a non-negative integer\");\r",
							"        pm.expect(item.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"id should be a non-negative integer\");\r",
							"        pm.expect(item.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"title should be a non-empty string\");\r",
							"        pm.expect(item.completed).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/todos"
			},
			"response": []
		},
		{
			"name": "Get Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post).to.have.property('userId');\r",
							"        pm.expect(post).to.have.property('id');\r",
							"        pm.expect(post).to.have.property('title');\r",
							"        pm.expect(post).to.have.property('body');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and body are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(post) {\r",
							"    pm.expect(post.title).to.be.a('string').and.to.have.length.at.least(1, \"Title should not be empty\");\r",
							"    pm.expect(post.body).to.be.a('string').and.to.have.length.at.least(1, \"Body should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the JSON schema of the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post).to.have.property('userId').that.is.a('number');\r",
							"        pm.expect(post).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(post).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(post).to.have.property('body').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts"
			},
			"response": []
		},
		{
			"name": "Get Posts by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the JSON schema for the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('userId').that.is.a('number');\r",
							"    pm.expect(responseData).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(responseData).to.have.property('title').that.is.a('string');\r",
							"    pm.expect(responseData).to.have.property('body').that.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('userId');\r",
							"  pm.expect(responseData).to.have.property('id');\r",
							"  pm.expect(responseData).to.have.property('title');\r",
							"  pm.expect(responseData).to.have.property('body');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response attributes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"\r",
							"    Object.keys(responseData).forEach(key => {\r",
							"        switch (key) {\r",
							"            case 'userId':\r",
							"                pm.expect(responseData.userId).to.be.a('number');\r",
							"                break;\r",
							"            case 'id':\r",
							"                pm.expect(responseData.id).to.be.a('number');\r",
							"                break;\r",
							"            case 'title':\r",
							"                pm.expect(responseData.title).to.be.a('string');\r",
							"                break;\r",
							"            case 'body':\r",
							"                pm.expect(responseData.body).to.be.a('string');\r",
							"                break;\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts/1"
			},
			"response": []
		},
		{
			"name": "Get Posts by id com falha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body matches the specific JSON schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.eql({});\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts/9999999"
			},
			"response": []
		},
		{
			"name": "Get TodoList by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in JSON format\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/todos/1"
			},
			"response": []
		},
		{
			"name": "Get TodoList by id com falha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/todos/99999"
			},
			"response": []
		}
	]
}